/**
 * üîß Á≥ªÁµ±Á©©ÂÆöÊÄßÊ∏¨Ë©¶
 * System Stability Tests
 */

const fs = require('fs');
const path = require('path');

describe('üîß System Stability Tests', () => {
    
    describe('üìÅ Ê™îÊ°àÁ≥ªÁµ±ÂÆåÊï¥ÊÄß', () => {
        test('ÊáâË©≤ÊúâÊâÄÊúâÂøÖË¶ÅÁöÑÊ†∏ÂøÉÊ™îÊ°à', () => {
            const coreFiles = [
                'server/server.js',
                'package.json',
                '.env.production',
                'ecosystem.config.js',
                'docker-compose.yml',
                'Dockerfile'
            ];

            coreFiles.forEach(file => {
                const filePath = path.join(__dirname, '../../', file);
                expect(fs.existsSync(filePath)).toBe(true);
            });
        });

        test('ÊáâË©≤ÊúâÂÆåÊï¥ÁöÑÂÆâÂÖ®ÈÖçÁΩÆÊ™îÊ°à', () => {
            const securityFiles = [
                'server/middleware/security/index.js',
                'server/middleware/security/headers.js',
                'server/middleware/security/inputSecurity.js',
                'server/middleware/security/authSecurity.js',
                'SECURITY_CHECKLIST.md'
            ];

            securityFiles.forEach(file => {
                const filePath = path.join(__dirname, '../../', file);
                expect(fs.existsSync(filePath)).toBe(true);
            });
        });

        test('ÊáâË©≤ÊúâÂÆåÊï¥ÁöÑÁõ£ÊéßÂíåÂëäË≠¶Á≥ªÁµ±', () => {
            const monitoringFiles = [
                'server/services/monitoringService.js',
                'server/services/alertService.js',
                'server/middleware/monitoring.js',
                'server/routes/api/monitoring.js',
                'server/routes/api/alerts.js'
            ];

            monitoringFiles.forEach(file => {
                const filePath = path.join(__dirname, '../../', file);
                expect(fs.existsSync(filePath)).toBe(true);
            });
        });
    });

    describe('üìã ÈÖçÁΩÆÊ™îÊ°àÈ©óË≠â', () => {
        test('package.json ÊáâË©≤ÂåÖÂê´ÊâÄÊúâÂøÖË¶ÅÁöÑ‰æùË≥¥', () => {
            const packagePath = path.join(__dirname, '../../package.json');
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

            const requiredDeps = [
                'express',
                'bcryptjs',
                'jsonwebtoken',
                'helmet',
                'cors',
                'compression',
                'express-rate-limit',
                'winston',
                'telegraf'
            ];

            requiredDeps.forEach(dep => {
                expect(packageJson.dependencies).toHaveProperty(dep);
            });
        });

        test('Áí∞Â¢ÉÈÖçÁΩÆÊ™îÊ°àÊáâË©≤Â≠òÂú®', () => {
            const envFiles = [
                '.env.production',
                '.env.development',
                '.env.staging'
            ];

            envFiles.forEach(file => {
                const filePath = path.join(__dirname, '../../', file);
                expect(fs.existsSync(filePath)).toBe(true);
            });
        });

        test('Docker ÈÖçÁΩÆÊáâË©≤ÊúâÊïà', () => {
            const dockerFiles = [
                'Dockerfile',
                'docker-compose.yml',
                'docker-compose.development.yml'
            ];

            dockerFiles.forEach(file => {
                const filePath = path.join(__dirname, '../../', file);
                expect(fs.existsSync(filePath)).toBe(true);
                
                const content = fs.readFileSync(filePath, 'utf8');
                expect(content.length).toBeGreaterThan(0);
            });
        });
    });

    describe('üóÑÔ∏è Ë≥áÊñôÂ∫´ÂÆåÊï¥ÊÄß', () => {
        test('Ë≥áÊñôÂ∫´Ê™îÊ°àÊáâË©≤Â≠òÂú®', () => {
            const dbPath = path.join(__dirname, '../../database/employee_management.db');
            expect(fs.existsSync(dbPath)).toBe(true);
        });

        test('Ë≥áÊñôÂ∫´ÊáâË©≤ÊúâÈÅ©Áï∂ÁöÑÂ§ßÂ∞è', () => {
            const dbPath = path.join(__dirname, '../../database/employee_management.db');
            if (fs.existsSync(dbPath)) {
                const stats = fs.statSync(dbPath);
                expect(stats.size).toBeGreaterThan(1024); // Ëá≥Â∞ë 1KB
            }
        });
    });

    describe('üìä Á≥ªÁµ±Ë≥áÊ∫êÊ™¢Êü•', () => {
        test('Ë®òÊÜ∂È´î‰ΩøÁî®ÊáâË©≤Âú®ÂêàÁêÜÁØÑÂúçÂÖß', () => {
            const memUsage = process.memoryUsage();
            const heapUsedMB = memUsage.heapUsed / 1024 / 1024;
            
            // Â†ÜË®òÊÜ∂È´î‰ΩøÁî®ÊáâË©≤Â∞ëÊñº 500MB
            expect(heapUsedMB).toBeLessThan(500);
        });

        test('Á≥ªÁµ±ÊáâË©≤ÊúâË∂≥Â§†ÁöÑÂèØÁî®Ë®òÊÜ∂È´î', () => {
            const os = require('os');
            const freeMemoryGB = os.freemem() / 1024 / 1024 / 1024;
            
            // Á≥ªÁµ±ÊáâË©≤ÊúâËá≥Â∞ë 100MB ÂèØÁî®Ë®òÊÜ∂È´î
            expect(freeMemoryGB * 1024).toBeGreaterThan(100);
        });
    });

    describe('üîí ÂÆâÂÖ®ÊÄßÊ™¢Êü•', () => {
        test('Áí∞Â¢ÉËÆäÊï∏Ê™îÊ°à‰∏çÊáâÂåÖÂê´ÁúüÂØ¶ÂØÜÈë∞', () => {
            const envPath = path.join(__dirname, '../../.env.production');
            if (fs.existsSync(envPath)) {
                const content = fs.readFileSync(envPath, 'utf8');
                
                // Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´È†êË®≠ÁöÑ‰∏çÂÆâÂÖ®ÂÄº
                const unsafeValues = [
                    'CHANGE_THIS',
                    'your_secret_key',
                    'password123',
                    'admin123'
                ];

                unsafeValues.forEach(value => {
                    expect(content).not.toContain(value);
                });
            }
        });

        test('ÊïèÊÑüÊ™îÊ°àÊáâË©≤ÊúâÈÅ©Áï∂ÁöÑÊ¨äÈôê', () => {
            if (process.platform !== 'win32') {
                const sensitiveFiles = [
                    '.env.production',
                    '.env.staging'
                ];

                sensitiveFiles.forEach(file => {
                    const filePath = path.join(__dirname, '../../', file);
                    if (fs.existsSync(filePath)) {
                        const stats = fs.statSync(filePath);
                        const permissions = (stats.mode & parseInt('777', 8)).toString(8);
                        
                        // Ê™îÊ°àÊ¨äÈôêÊáâË©≤ÊòØ 600 ÊàñÊõ¥Âö¥Ê†º
                        expect(['600', '640', '644']).toContain(permissions);
                    }
                });
            }
        });
    });

    describe('‚ö° ÊïàËÉΩÂü∫Ê∫ñÊ∏¨Ë©¶', () => {
        test('Ê®°ÁµÑËºâÂÖ•ÊôÇÈñìÊáâË©≤Âú®ÂêàÁêÜÁØÑÂúçÂÖß', async () => {
            const startTime = Date.now();
            
            // ÂòóË©¶ËºâÂÖ•Ê†∏ÂøÉÊ®°ÁµÑ
            const coreModules = [
                '../../server/utils/logger',
                '../../server/middleware/security/index'
            ];

            for (const modulePath of coreModules) {
                const moduleStartTime = Date.now();
                try {
                    require(modulePath);
                    const loadTime = Date.now() - moduleStartTime;
                    expect(loadTime).toBeLessThan(1000); // ÊØèÂÄãÊ®°ÁµÑËºâÂÖ•ÊáâÂú®1ÁßíÂÖß
                } catch (error) {
                    // Â¶ÇÊûúÊ®°ÁµÑ‰∏çÂ≠òÂú®ÊàñÊúâÈåØË™§ÔºåË®òÈåÑ‰ΩÜ‰∏çÂ§±ÊïóÊ∏¨Ë©¶
                    console.warn(`Module load warning: ${modulePath}`, error.message);
                }
            }

            const totalTime = Date.now() - startTime;
            expect(totalTime).toBeLessThan(5000); // Á∏ΩËºâÂÖ•ÊôÇÈñìÊáâÂú®5ÁßíÂÖß
        });

        test('JSON Ëß£ÊûêÊïàËÉΩÊ∏¨Ë©¶', () => {
            const largeObject = {
                data: new Array(1000).fill(0).map((_, i) => ({
                    id: i,
                    name: `item_${i}`,
                    value: Math.random(),
                    timestamp: Date.now()
                }))
            };

            const startTime = Date.now();
            const jsonString = JSON.stringify(largeObject);
            const parsed = JSON.parse(jsonString);
            const endTime = Date.now();

            expect(endTime - startTime).toBeLessThan(100); // JSON Êìç‰ΩúÊáâÂú® 100ms ÂÖßÂÆåÊàê
            expect(parsed.data.length).toBe(1000);
        });
    });

    describe('üåê Á∂≤Ë∑ØÂíåÈÄ£Êé•Ê∏¨Ë©¶', () => {
        test('DNS Ëß£ÊûêÊáâË©≤Ê≠£Â∏∏Â∑•‰Ωú', async () => {
            const dns = require('dns').promises;
            
            try {
                const result = await dns.lookup('google.com');
                expect(result.address).toBeDefined();
                expect(result.family).toBeOneOf([4, 6]);
            } catch (error) {
                // Â¶ÇÊûúÊ≤íÊúâÁ∂≤Ë∑ØÈÄ£Êé•ÔºåË∑≥ÈÅéÊ∏¨Ë©¶
                console.warn('Network test skipped: No internet connection');
            }
        }, 10000);

        test('Êú¨Âú∞Á´ØÂè£ÊáâË©≤ÂèØÁî®', () => {
            const net = require('net');
            
            return new Promise((resolve) => {
                const server = net.createServer();
                
                server.listen(0, () => {
                    const port = server.address().port;
                    expect(port).toBeGreaterThan(1024);
                    server.close(() => resolve());
                });

                server.on('error', (error) => {
                    expect(error).toBe(null);
                    resolve();
                });
            });
        });
    });

    describe('üìù Êó•Ë™åÁ≥ªÁµ±Ê∏¨Ë©¶', () => {
        test('Êó•Ë™åÁõÆÈåÑÊáâË©≤Â≠òÂú®‰∏îÂèØÂØ´ÂÖ•', () => {
            const logDir = path.join(__dirname, '../../logs');
            
            if (!fs.existsSync(logDir)) {
                fs.mkdirSync(logDir, { recursive: true });
            }

            expect(fs.existsSync(logDir)).toBe(true);

            // Ê∏¨Ë©¶ÂØ´ÂÖ•Ê¨äÈôê
            const testFile = path.join(logDir, 'test.log');
            fs.writeFileSync(testFile, 'test log entry');
            expect(fs.existsSync(testFile)).toBe(true);

            // Ê∏ÖÁêÜÊ∏¨Ë©¶Ê™îÊ°à
            fs.unlinkSync(testFile);
        });

        test('Êó•Ë™åÊ™îÊ°àÂ§ßÂ∞èÊáâË©≤ÂêàÁêÜ', () => {
            const logDir = path.join(__dirname, '../../logs');
            
            if (fs.existsSync(logDir)) {
                const logFiles = fs.readdirSync(logDir).filter(file => file.endsWith('.log'));
                
                logFiles.forEach(file => {
                    const filePath = path.join(logDir, file);
                    const stats = fs.statSync(filePath);
                    const sizeMB = stats.size / 1024 / 1024;
                    
                    // ÂñÆÂÄãÊó•Ë™åÊ™îÊ°à‰∏çÊáâË∂ÖÈÅé 100MB
                    expect(sizeMB).toBeLessThan(100);
                });
            }
        });
    });

    describe('üîÑ Á≥ªÁµ±ÊÅ¢Âæ©ËÉΩÂäõÊ∏¨Ë©¶', () => {
        test('Á≥ªÁµ±ÊáâË©≤ËÉΩËôïÁêÜÂ§ßÈáèÂêåÊ≠•Êìç‰Ωú', async () => {
            const operations = Array.from({ length: 100 }, (_, i) => 
                new Promise(resolve => {
                    setTimeout(() => resolve(i), Math.random() * 100);
                })
            );

            const startTime = Date.now();
            const results = await Promise.all(operations);
            const endTime = Date.now();

            expect(results).toHaveLength(100);
            expect(endTime - startTime).toBeLessThan(1000);
        });

        test('ÈåØË™§ËôïÁêÜÊáâË©≤ÂÑ™ÈõÖ', async () => {
            const errorOperations = [
                () => { throw new Error('Test error 1'); },
                () => Promise.reject(new Error('Test error 2')),
                () => Promise.resolve('success'),
                () => { throw new Error('Test error 3'); }
            ];

            const results = await Promise.allSettled(
                errorOperations.map(op => 
                    Promise.resolve().then(op).catch(error => ({ error: error.message }))
                )
            );

            expect(results).toHaveLength(4);
            expect(results.filter(r => r.status === 'fulfilled')).toHaveLength(4);
        });
    });

    describe('üéØ Êï¥È´îÁ≥ªÁµ±ÂÅ•Â∫∑Ê™¢Êü•', () => {
        test('ÊâÄÊúâÈóúÈçµÁ≥ªÁµ±ÁµÑ‰ª∂ÈÉΩÊáâË©≤Â∞±Á∑í', () => {
            const components = {
                database: fs.existsSync(path.join(__dirname, '../../database/employee_management.db')),
                security: fs.existsSync(path.join(__dirname, '../../server/middleware/security/index.js')),
                monitoring: fs.existsSync(path.join(__dirname, '../../server/services/monitoringService.js')),
                alerts: fs.existsSync(path.join(__dirname, '../../server/services/alertService.js')),
                logs: fs.existsSync(path.join(__dirname, '../../logs')) || true // ÂèØ‰ª•‰∏çÂ≠òÂú®ÔºåÊúÉËá™ÂãïÂâµÂª∫
            };

            Object.entries(components).forEach(([component, status]) => {
                expect(status).toBe(true);
            });

            const readyComponents = Object.values(components).filter(Boolean).length;
            const totalComponents = Object.keys(components).length;
            const readinessPercentage = (readyComponents / totalComponents) * 100;

            expect(readinessPercentage).toBeGreaterThanOrEqual(80); // Ëá≥Â∞ë80%ÁöÑÁµÑ‰ª∂Â∞±Á∑í
        });
    });
});