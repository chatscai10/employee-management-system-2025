/**
 * üåê GPSÊâìÂç°Á≥ªÁµ±ÂÆåÊï¥È©óË≠âTelegramÈÄöÁü•ÂºïÊìé
 */

const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

class GPSVerificationTelegramReporter {
    constructor() {
        this.botToken = 'process.env.TELEGRAM_BOT_TOKEN';
        this.groupId = 'process.env.TELEGRAM_GROUP_ID';
        this.bot = new TelegramBot(this.botToken, { polling: false });
    }

    async sendComprehensiveReport() {
        try {
            // ËÆÄÂèñÈ©óË≠âÁµêÊûú
            const reportFiles = fs.readdirSync('D:/0809/').filter(f => 
                f.startsWith('comprehensive-gps-verification-data-') && f.endsWith('.json')
            );
            
            if (reportFiles.length === 0) {
                throw new Error('Êâæ‰∏çÂà∞È©óË≠âÁµêÊûúÊ™îÊ°à');
            }
            
            // ÂèñÂæóÊúÄÊñ∞ÁöÑÂ†±Âëä
            const latestReport = reportFiles.sort().pop();
            const verificationData = JSON.parse(
                fs.readFileSync(`D:/0809/${latestReport}`, 'utf8')
            );

            // ÊßãÂª∫Ë©≥Á¥∞Â†±ÂëäË®äÊÅØ
            const message = this.buildDetailedMessage(verificationData);
            
            // ÁôºÈÄÅ‰∏ªÂ†±Âëä
            await this.bot.sendMessage(this.groupId, message, {
                disable_web_page_preview: true
            });

            // ÁôºÈÄÅË©≥Á¥∞Áµ±Ë®àË≥áÊñô
            const statsMessage = this.buildStatsMessage(verificationData);
            await this.bot.sendMessage(this.groupId, statsMessage);

            // Â¶ÇÊûúÊúâÂö¥ÈáçÂïèÈ°åÔºåÁôºÈÄÅË≠¶Âëä
            if (this.hasCriticalIssues(verificationData)) {
                const alertMessage = this.buildAlertMessage(verificationData);
                await this.bot.sendMessage(this.groupId, alertMessage);
            }

            console.log('‚úÖ TelegramÈ©óË≠âÂ†±ÂëäÂ∑≤ÊàêÂäüÁôºÈÄÅ');
            return true;

        } catch (error) {
            console.error('‚ùå TelegramÂ†±ÂëäÁôºÈÄÅÂ§±Êïó:', error.message);
            return false;
        }
    }

    buildDetailedMessage(data) {
        const timestamp = new Date(data.timestamp).toLocaleString('zh-TW');
        
        return `üåê GPSÊâìÂç°Á≥ªÁµ±ÂÆåÊï¥È©óË≠âÂ†±Âëä

üìä È©óË≠âÊ¶ÇË¶Ω
‚Ä¢ È©óË≠âÊôÇÈñì: ${timestamp}
‚Ä¢ ÂïèÈ°åÊï∏Èáè: ${data.issues?.length || 0}ÂÄã
‚Ä¢ Âª∫Ë≠∞Êï∏Èáè: ${data.recommendations?.length || 0}ÂÄã

üîç Ê†∏ÂøÉÂäüËÉΩÈ©óË≠âÁµêÊûú

1Ô∏è‚É£ ‰º∫ÊúçÂô®ÁãÄÊÖã
${data.serverStatus?.isRunning ? '‚úÖ' : '‚ùå'} ‰º∫ÊúçÂô®ÈÅãË°å
${data.serverStatus?.error ? `‚ö†Ô∏è ÈåØË™§: ${data.serverStatus.error.substring(0, 50)}...` : ''}

2Ô∏è‚É£ GPSÊï¥ÂêàÁ≥ªÁµ±
‚Ä¢ Áõ∏ÈóúËÖ≥Êú¨: ${data.gpsIntegration?.scriptsLoaded?.length || 0}ÂÄã
‚Ä¢ ÁïåÈù¢ÂÖÉÁ¥†: ${data.gpsIntegration?.elementsFound?.length || 0}ÂÄã
‚Ä¢ Ê¨äÈôêÊ∏¨Ë©¶: ${data.gpsIntegration?.permissionTest?.success ? '‚úÖ' : '‚ùå'}

3Ô∏è‚É£ TelegramÈÄöÁü•
‚Ä¢ BotÈÄ£Êé•: ${data.telegramNotification?.botStatus?.connected ? '‚úÖ' : '‚ùå'}
‚Ä¢ Ê∏¨Ë©¶Ê∂àÊÅØ: ${data.telegramNotification?.testMessage?.sent ? '‚úÖ' : '‚ùå'}
‚Ä¢ BotÂêçÁ®±: ${data.telegramNotification?.botStatus?.botName || 'unknown'}

4Ô∏è‚É£ Ë®≠ÂÇôÊåáÁ¥ãÊ™¢Ê∏¨
‚Ä¢ ÊåáÁ¥ãÁîüÊàê: ${data.deviceFingerprint?.generated ? '‚úÖ' : '‚ùå'}
‚Ä¢ ÂîØ‰∏ÄÊÄßË©ïÂàÜ: ${data.deviceFingerprint?.uniqueness || 0}%
‚Ä¢ ÁµÑ‰ª∂Êï∏Èáè: ${data.deviceFingerprint?.components?.length || 0}ÂÄã

5Ô∏è‚É£ Âú∞ÁêÜÂúçÊ¨ÑÈ©óË≠â
‚Ä¢ Ê∏¨Ë©¶‰ΩçÁΩÆ: ${data.geofencing?.tests?.length || 0}ÂÄã
‚Ä¢ Ê∫ñÁ¢∫Â∫¶: ${data.geofencing?.accuracy?.accuracy || 0}%
‚Ä¢ Ê≠£Á¢∫È†êÊ∏¨: ${data.geofencing?.accuracy?.correctPredictions || 0}/${data.geofencing?.accuracy?.totalTests || 0}

6Ô∏è‚É£ Á´ØÂà∞Á´ØÊ∏¨Ë©¶
ÊàêÂäüÊ≠•È©ü: ${data.endToEnd?.steps?.filter(s => s.success).length || 0}/${data.endToEnd?.steps?.length || 0}
Á∏ΩÂü∑Ë°åÊôÇÈñì: ${data.endToEnd?.totalTime || 0}ms

7Ô∏è‚É£ ÊÄßËÉΩÂàÜÊûê
‚Ä¢ È†ÅÈù¢Âä†Ëºâ: ${data.performance?.pageLoad?.totalLoadTime || 0}ms
‚Ä¢ ÊÄßËÉΩÁ≠âÁ¥ö: ${data.performance?.performanceGrade?.grade || 'N/A'}
‚Ä¢ Ë©ïÂàÜ: ${data.performance?.performanceGrade?.score || 0}ÂàÜ`;
    }

    buildStatsMessage(data) {
        // Ë®àÁÆóÂêÑÈ†ÖÁµ±Ë®à
        const functionalCompleteness = this.calculateFunctionalCompleteness(data);
        const systemStability = this.calculateSystemStability(data);
        const userExperience = this.calculateUserExperience(data);
        const security = this.calculateSecurity(data);

        return `üìà *Á≥ªÁµ±Áµ±Ë®àÊëòË¶Å*

üéØ *Êï¥È´îË©ï‰º∞*
‚Ä¢ ÂäüËÉΩÂÆåÊï¥Â∫¶: ${functionalCompleteness}%
‚Ä¢ Á≥ªÁµ±Á©©ÂÆöÊÄß: ${systemStability}%
‚Ä¢ Áî®Êà∂È´îÈ©ó: ${userExperience}%
‚Ä¢ ÂÆâÂÖ®ÊÄß: ${security}%

üîß *ÊäÄË°ìÊåáÊ®ô*
‚Ä¢ APIÈüøÊáâÊôÇÈñì: ${this.getAvgApiResponseTime(data)}ms
‚Ä¢ Ë≥áÊ∫êÂä†ËºâÊï∏Èáè: ${data.performance?.resources?.totalResources || 0}
‚Ä¢ Ë®≠ÂÇôÊåáÁ¥ãÁµÑ‰ª∂: ${data.deviceFingerprint?.components?.length || 0}/8
‚Ä¢ Âú∞ÁêÜÂúçÊ¨ÑÁ≤æÂ∫¶: ${data.geofencing?.accuracy?.accuracy || 0}%

‚ö° *Êô∫ÊÖßÊ®°ÊùøÊï¥ÂêàÁãÄÊ≥Å*
${this.getTemplateIntegrationStatus(data)}

üîÑ *Ëá™ÂãïÂåñÈ©óË≠âÊµÅÁ®ã*
‚Ä¢ ÁÄèË¶ΩÂô®Ëá™ÂãïÂåñ: ‚úÖ Â∑≤Âü∑Ë°å
‚Ä¢ Êà™ÂúñÁîüÊàê: ${data.frontendUX?.error ? '‚ùå' : '‚úÖ'}
‚Ä¢ APIÊ∏¨Ë©¶: ‚úÖ Â∑≤ÂÆåÊàê
‚Ä¢ Á´ØÂà∞Á´ØÊ∏¨Ë©¶: ${data.endToEnd?.success ? '‚úÖ' : '‚ùå'}`;
    }

    buildAlertMessage(data) {
        const criticalIssues = data.issues?.filter(issue => 
            issue.severity === 'CRITICAL' || issue.severity === 'HIGH'
        ) || [];

        return `üö® *Á≥ªÁµ±Ë≠¶Âëä - ÁôºÁèæÂö¥ÈáçÂïèÈ°å*

‚ö†Ô∏è *ÈúÄË¶ÅÁ´ãÂç≥ËôïÁêÜÁöÑÂïèÈ°å*
${criticalIssues.map((issue, index) => 
    `${index + 1}. *${issue.type}*
   Âö¥ÈáçÂ∫¶: ${issue.severity}
   Ë®äÊÅØ: ${issue.message}`
).join('\n\n')}

üéØ *Âª∫Ë≠∞ÂÑ™ÂÖàË°åÂãï*
${data.recommendations?.filter(r => r.priority === 'HIGH' || r.priority === 'CRITICAL')
    .map((rec, index) => 
        `${index + 1}. *${rec.category}* (${rec.priority})
   ${rec.suggestion}`
    ).join('\n\n')}

üìû *ËÅØÁµ°Ë≥áË®ä*
Ë´ãÁ´ãÂç≥ËÅØÁµ°Á≥ªÁµ±ÁÆ°ÁêÜÂì°ËôïÁêÜ‰∏äËø∞ÂïèÈ°å`;
    }

    hasCriticalIssues(data) {
        const criticalIssues = data.issues?.filter(issue => 
            issue.severity === 'CRITICAL' || issue.severity === 'HIGH'
        ) || [];
        
        return criticalIssues.length > 0;
    }

    calculateFunctionalCompleteness(data) {
        const categories = ['serverStatus', 'gpsIntegration', 'geofencing', 'deviceFingerprint'];
        let workingCategories = 0;
        
        categories.forEach(category => {
            const result = data[category];
            if (result && !result.error) {
                workingCategories++;
            }
        });
        
        return Math.round((workingCategories / categories.length) * 100);
    }

    calculateSystemStability(data) {
        const criticalIssues = data.issues?.filter(
            issue => issue.severity === 'CRITICAL' || issue.severity === 'HIGH'
        ).length || 0;
        
        const maxCriticalIssues = 5;
        return Math.max(0, Math.round(((maxCriticalIssues - criticalIssues) / maxCriticalIssues) * 100));
    }

    calculateUserExperience(data) {
        let score = 100;
        
        if (data.frontendUX?.error) score -= 50;
        if (data.performance?.error) score -= 30;
        if (data.performance?.performanceGrade?.score < 70) score -= 20;
        
        return Math.max(0, score);
    }

    calculateSecurity(data) {
        let score = 100;
        
        if (data.deviceFingerprint?.error || !data.deviceFingerprint?.generated) score -= 40;
        if (data.geofencing?.error || (data.geofencing?.accuracy?.accuracy || 0) < 80) score -= 30;
        if ((data.deviceFingerprint?.uniqueness || 0) < 60) score -= 30;
        
        return Math.max(0, score);
    }

    getAvgApiResponseTime(data) {
        if (!data.apiRoutes || Object.keys(data.apiRoutes).length === 0) return 'N/A';
        
        const responseTimes = Object.values(data.apiRoutes)
            .filter(route => route.responseTime)
            .map(route => route.responseTime);
            
        if (responseTimes.length === 0) return 'N/A';
        
        return Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length);
    }

    getTemplateIntegrationStatus(data) {
        const templates = [
            { name: 'modern-geolocation-tracker', status: data.gpsIntegration?.scriptsLoaded?.length > 0 ? '‚úÖ' : '‚ùå' },
            { name: 'multi-store-geofencing', status: data.geofencing?.tests?.length > 0 ? '‚úÖ' : '‚ùå' },
            { name: 'enterprise-telegram-notification', status: data.telegramNotification?.testMessage?.sent ? '‚úÖ' : '‚ùå' }
        ];

        return templates.map(t => `‚Ä¢ ${t.name}: ${t.status}`).join('\n');
    }
}

// Áõ¥Êé•Âü∑Ë°åÂ†±ÂëäÁôºÈÄÅ
if (require.main === module) {
    const reporter = new GPSVerificationTelegramReporter();
    
    reporter.sendComprehensiveReport()
        .then(success => {
            if (success) {
                console.log('üéâ GPSÈ©óË≠âTelegramÂ†±ÂëäÁôºÈÄÅÂÆåÊàê');
                process.exit(0);
            } else {
                console.log('‚ùå GPSÈ©óË≠âTelegramÂ†±ÂëäÁôºÈÄÅÂ§±Êïó');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('‚ùå Âü∑Ë°åÈåØË™§:', error);
            process.exit(1);
        });
}

module.exports = GPSVerificationTelegramReporter;