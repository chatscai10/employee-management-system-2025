/**
 * üåê API Êï¥ÂêàÊ∏¨Ë©¶
 * API Integration Tests
 */

const request = require('supertest');
const app = require('../../server/server');

describe('üåê API Integration Tests', () => {
    let server;
    let adminToken;
    let employeeToken;

    beforeAll(async () => {
        server = app.listen(0);

        // Áç≤ÂèñÁÆ°ÁêÜÂì° token
        const adminLogin = await request(app)
            .post('/api/auth/login')
            .send({
                employeeId: 'ADMIN001',
                password: 'admin123'
            });
        adminToken = adminLogin.body.token;

        // Áç≤Âèñ‰∏ÄËà¨Âì°Â∑• token
        const employeeLogin = await request(app)
            .post('/api/auth/login')
            .send({
                employeeId: 'EMP001',
                password: 'password123'
            });
        employeeToken = employeeLogin.body.token;
    });

    afterAll(async () => {
        if (server) {
            await new Promise(resolve => server.close(resolve));
        }
    });

    describe('üîê Authentication Flow', () => {
        test('ÂÆåÊï¥ÁöÑÁî®Êà∂Ë™çË≠âÊµÅÁ®ã', async () => {
            // 1. Ë®ªÂÜäÊñ∞Áî®Êà∂
            const registerResponse = await request(app)
                .post('/api/auth/register')
                .send({
                    employeeId: 'INTEGRATION001',
                    name: 'Êï¥ÂêàÊ∏¨Ë©¶Áî®Êà∂',
                    email: 'integration@test.com',
                    password: 'password123',
                    role: 'employee',
                    storeId: 1
                })
                .expect(201);

            expect(registerResponse.body.success).toBe(true);

            // 2. Áî®Êà∂ÁôªÂÖ•
            const loginResponse = await request(app)
                .post('/api/auth/login')
                .send({
                    employeeId: 'INTEGRATION001',
                    password: 'password123'
                })
                .expect(200);

            expect(loginResponse.body.success).toBe(true);
            expect(loginResponse.body.token).toBeDefined();

            // 3. Ë®™ÂïèÂèó‰øùË≠∑ÁöÑË≥áÊ∫ê
            const profileResponse = await request(app)
                .get('/api/employees/profile')
                .set('Authorization', `Bearer ${loginResponse.body.token}`)
                .expect(200);

            expect(profileResponse.body.success).toBe(true);
            expect(profileResponse.body.employee.employeeId).toBe('INTEGRATION001');

            // 4. ÁôªÂá∫
            const logoutResponse = await request(app)
                .post('/api/auth/logout')
                .set('Authorization', `Bearer ${loginResponse.body.token}`)
                .expect(200);

            expect(logoutResponse.body.success).toBe(true);
        });
    });

    describe('üìÖ Complete Attendance Workflow', () => {
        test('ÂÆåÊï¥ÁöÑÂá∫Âã§Â∑•‰ΩúÊµÅÁ®ã', async () => {
            // 1. ‰∏äÁè≠ÊâìÂç°
            const checkinResponse = await request(app)
                .post('/api/attendance/checkin')
                .set('Authorization', `Bearer ${employeeToken}`)
                .send({
                    latitude: 25.0330,
                    longitude: 121.5654,
                    address: 'Âè∞ÂåóÂ∏Ç‰ø°Áæ©ÂçÄ'
                })
                .expect(200);

            expect(checkinResponse.body.success).toBe(true);
            const attendanceId = checkinResponse.body.attendance.id;

            // 2. Êü•Ë©¢Áï∂Êó•Âá∫Âã§ÁãÄÊÖã
            const statusResponse = await request(app)
                .get('/api/attendance/status')
                .set('Authorization', `Bearer ${employeeToken}`)
                .expect(200);

            expect(statusResponse.body.success).toBe(true);
            expect(statusResponse.body.status).toBe('checked_in');

            // 3. ‰∏ãÁè≠ÊâìÂç°
            const checkoutResponse = await request(app)
                .post('/api/attendance/checkout')
                .set('Authorization', `Bearer ${employeeToken}`)
                .send({
                    latitude: 25.0330,
                    longitude: 121.5654,
                    address: 'Âè∞ÂåóÂ∏Ç‰ø°Áæ©ÂçÄ'
                })
                .expect(200);

            expect(checkoutResponse.body.success).toBe(true);
            expect(checkoutResponse.body.attendance.workingHours).toBeGreaterThan(0);

            // 4. Êü•Ë©¢Âá∫Âã§Ë®òÈåÑ
            const recordsResponse = await request(app)
                .get('/api/attendance/records')
                .set('Authorization', `Bearer ${employeeToken}`)
                .expect(200);

            expect(recordsResponse.body.success).toBe(true);
            expect(recordsResponse.body.records.length).toBeGreaterThan(0);
        });
    });

    describe('üí∞ Revenue Management Flow', () => {
        test('ÂÆåÊï¥ÁöÑÁáüÊî∂ÁÆ°ÁêÜÊµÅÁ®ã', async () => {
            // 1. Ê∑ªÂä†ÁáüÊî∂Ë®òÈåÑ
            const addRevenueResponse = await request(app)
                .post('/api/revenue/add')
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    storeId: 1,
                    amount: 15000,
                    date: new Date().toISOString().split('T')[0],
                    description: 'Êï¥ÂêàÊ∏¨Ë©¶ÁáüÊî∂Ë®òÈåÑ',
                    category: 'sales'
                })
                .expect(200);

            expect(addRevenueResponse.body.success).toBe(true);
            const revenueId = addRevenueResponse.body.revenue.id;

            // 2. Êü•Ë©¢ÁáüÊî∂Ë®òÈåÑ
            const getRevenueResponse = await request(app)
                .get('/api/revenue/records')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(getRevenueResponse.body.success).toBe(true);
            expect(getRevenueResponse.body.records.length).toBeGreaterThan(0);

            // 3. Êõ¥Êñ∞ÁáüÊî∂Ë®òÈåÑ
            const updateRevenueResponse = await request(app)
                .put(`/api/revenue/update/${revenueId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    amount: 16000,
                    description: 'Êõ¥Êñ∞ÂæåÁöÑÁáüÊî∂Ë®òÈåÑ'
                })
                .expect(200);

            expect(updateRevenueResponse.body.success).toBe(true);

            // 4. Áç≤ÂèñÁáüÊî∂Áµ±Ë®à
            const statsResponse = await request(app)
                .get('/api/revenue/statistics')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(statsResponse.body.success).toBe(true);
            expect(statsResponse.body.statistics).toHaveProperty('totalRevenue');

            // 5. Âà™Èô§Ê∏¨Ë©¶Ë®òÈåÑ
            const deleteResponse = await request(app)
                .delete(`/api/revenue/delete/${revenueId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(deleteResponse.body.success).toBe(true);
        });
    });

    describe('üë• Employee Management', () => {
        test('Âì°Â∑•ÁÆ°ÁêÜÂÆåÊï¥ÊµÅÁ®ã', async () => {
            // 1. ÂâµÂª∫Êñ∞Âì°Â∑• (Âè™ÊúâÁÆ°ÁêÜÂì°ÂèØ‰ª•)
            const createResponse = await request(app)
                .post('/api/admin/employees/create')
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    employeeId: 'MGMT001',
                    name: 'ÁÆ°ÁêÜÊ∏¨Ë©¶Âì°Â∑•',
                    email: 'mgmt@test.com',
                    role: 'employee',
                    storeId: 1
                })
                .expect(200);

            expect(createResponse.body.success).toBe(true);
            const newEmployeeId = createResponse.body.employee.id;

            // 2. Êü•Ë©¢ÊâÄÊúâÂì°Â∑•
            const listResponse = await request(app)
                .get('/api/admin/employees')
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(listResponse.body.success).toBe(true);
            expect(listResponse.body.employees.length).toBeGreaterThan(0);

            // 3. Êõ¥Êñ∞Âì°Â∑•Ë≥áÊñô
            const updateResponse = await request(app)
                .put(`/api/admin/employees/update/${newEmployeeId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    name: 'Êõ¥Êñ∞ÂæåÁöÑÂì°Â∑•ÂêçÁ®±',
                    role: 'manager'
                })
                .expect(200);

            expect(updateResponse.body.success).toBe(true);

            // 4. ‰∏ÄËà¨Âì°Â∑•‰∏çËÉΩË®™ÂïèÁÆ°ÁêÜÂäüËÉΩ
            const unauthorizedResponse = await request(app)
                .get('/api/admin/employees')
                .set('Authorization', `Bearer ${employeeToken}`)
                .expect(403);

            expect(unauthorizedResponse.body.success).toBe(false);

            // 5. ÂÅúÁî®Âì°Â∑•Â∏≥Ëôü
            const deactivateResponse = await request(app)
                .put(`/api/admin/employees/deactivate/${newEmployeeId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .expect(200);

            expect(deactivateResponse.body.success).toBe(true);
        });
    });

    describe('üîí Security Tests', () => {
        test('ÊáâË©≤ÈòªÊìãÊú™ÊéàÊ¨äË®™Âïè', async () => {
            // Ê≤íÊúâ token
            await request(app)
                .get('/api/employees/profile')
                .expect(401);

            // ÁÑ°Êïà token
            await request(app)
                .get('/api/employees/profile')
                .set('Authorization', 'Bearer invalid_token')
                .expect(401);

            // ÈÅéÊúü token (Ê®°Êì¨)
            const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTYyMzkwMjJ9.invalid';
            await request(app)
                .get('/api/employees/profile')
                .set('Authorization', `Bearer ${expiredToken}`)
                .expect(401);
        });

        test('ÊáâË©≤ÈòªÊìã SQL Ê≥®ÂÖ•ÊîªÊìä', async () => {
            const maliciousData = {
                employeeId: "'; DROP TABLE employees; --",
                password: 'password123'
            };

            const response = await request(app)
                .post('/api/auth/login')
                .send(maliciousData)
                .expect(401);

            expect(response.body.success).toBe(false);
        });

        test('ÊáâË©≤ÈòªÊìã XSS ÊîªÊìä', async () => {
            const xssPayload = {
                name: '<script>alert("XSS")</script>',
                email: 'xss@test.com'
            };

            const response = await request(app)
                .put('/api/employees/profile')
                .set('Authorization', `Bearer ${employeeToken}`)
                .send(xssPayload);

            // ÊáâË©≤Ê∏ÖÁêÜÊàñÊãíÁµïÊÉ°ÊÑèÂÖßÂÆπ
            if (response.status === 200) {
                expect(response.body.employee.name).not.toContain('<script>');
            } else {
                expect(response.status).toBeGreaterThanOrEqual(400);
            }
        });
    });

    describe('üìä Performance Tests', () => {
        test('API ÂõûÊáâÊôÇÈñìÊáâË©≤Âú®ÂêàÁêÜÁØÑÂúçÂÖß', async () => {
            const startTime = Date.now();

            await request(app)
                .get('/api/attendance/records')
                .set('Authorization', `Bearer ${employeeToken}`)
                .expect(200);

            const responseTime = Date.now() - startTime;
            expect(responseTime).toBeLessThan(5000); // 5ÁßíÂÖßÂõûÊáâ
        });

        test('ÊáâË©≤ËÉΩÂ§†ËôïÁêÜ‰∏¶ÁôºË´ãÊ±Ç', async () => {
            const promises = [];

            // ÂêåÊôÇÁôºÈÄÅ 10 ÂÄãË´ãÊ±Ç
            for (let i = 0; i < 10; i++) {
                promises.push(
                    request(app)
                        .get('/api/attendance/status')
                        .set('Authorization', `Bearer ${employeeToken}`)
                );
            }

            const responses = await Promise.all(promises);
            responses.forEach(response => {
                expect(response.status).toBe(200);
                expect(response.body.success).toBe(true);
            });
        });
    });
});