const puppeteer = require('puppeteer');

class ComprehensiveSystemCRUDTest {
    constructor() {
        this.browser = null;
        this.page = null;
        this.testResults = [];
        this.baseUrl = 'https://employee-management-system-intermediate.onrender.com';
        this.employeeCredentials = { name: 'Âºµ‰∏â', id: 'C123456789' };
        this.adminCredentials = { username: 'admin', password: 'admin123' };
    }

    async init() {
        console.log('üöÄ ÂïüÂãïÂÖ®Èù¢Á≥ªÁµ±CRUDÂäüËÉΩÊ∏¨Ë©¶...');
        
        this.browser = await puppeteer.launch({
            headless: false,
            slowMo: 800,
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-web-security']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setViewport({ width: 1366, height: 768 });
        
        this.page.on('console', msg => {
            if (msg.text().includes('API') || msg.text().includes('ÈåØË™§') || msg.text().includes('ÊàêÂäü')) {
                console.log(`üñ•Ô∏è Á≥ªÁµ±ÂõûÊáâ: ${msg.text()}`);
            }
        });
        
        console.log('‚úÖ Ê∏¨Ë©¶Áí∞Â¢ÉÂ∑≤Ê∫ñÂÇôÂÆåÊàê');
    }

    async loginAsEmployee() {
        console.log('\nüë§ Âì°Â∑•Ë∫´‰ªΩÁôªÂÖ•...');
        
        try {
            await this.page.goto(`${this.baseUrl}/login`, { waitUntil: 'domcontentloaded' });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            await this.page.waitForSelector('#login-name');
            await this.page.type('#login-name', this.employeeCredentials.name);
            await this.page.type('#login-id', this.employeeCredentials.id);
            await this.page.click('button[type="submit"]');
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            const success = await this.page.$('.content-area') !== null;
            
            this.testResults.push({
                category: 'ÁôªÂÖ•È©óË≠â',
                test: 'Âì°Â∑•ÁôªÂÖ•',
                success: success,
                details: success ? 'Âì°Â∑•ÁôªÂÖ•ÊàêÂäü' : 'Âì°Â∑•ÁôªÂÖ•Â§±Êïó'
            });
            
            console.log(success ? '‚úÖ Âì°Â∑•ÁôªÂÖ•ÊàêÂäü' : '‚ùå Âì°Â∑•ÁôªÂÖ•Â§±Êïó');
            return success;
        } catch (error) {
            console.error('‚ùå Âì°Â∑•ÁôªÂÖ•ÈåØË™§:', error.message);
            return false;
        }
    }

    async testEmployeeCreateOperations() {
        console.log('\nüìù Ê∏¨Ë©¶Âì°Â∑•È†ÅÈù¢ - Êñ∞Â¢ûÂäüËÉΩ');
        
        const createTests = [
            {
                name: 'ÁáüÊî∂Ë®òÈåÑÊñ∞Â¢û',
                module: 'revenue',
                operation: async () => {
                    await this.page.click('[data-section="revenue"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    await this.page.waitForSelector('#revenueAmount');
                    await this.page.type('#revenueAmount', '8500');
                    await this.page.select('#revenueCategory', 'ÈñÄÂ∏ÇÈä∑ÂîÆ');
                    await this.page.type('#revenueDescription', 'Ëá™ÂãïÂåñÊ∏¨Ë©¶ÁáüÊî∂Ë®òÈåÑ');
                    
                    const originalAmount = await this.page.$eval('#revenueAmount', el => el.value);
                    await this.page.click('#revenue-form button[type="submit"]');
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    
                    const newAmount = await this.page.$eval('#revenueAmount', el => el.value);
                    return { 
                        success: newAmount === '' && originalAmount === '8500',
                        details: `Ë°®ÂñÆÊ∏ÖÁ©∫ÁãÄÊÖã: ${newAmount === '' ? 'ÊòØ' : 'Âê¶'}, ÂéüÂßãÈáëÈ°ç: ${originalAmount}`
                    };
                }
            },
            {
                name: 'ÊâìÂç°Ë®òÈåÑÊñ∞Â¢û',
                module: 'attendance',
                operation: async () => {
                    await this.page.click('[data-section="attendance"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Â∞ãÊâæÊâìÂç°Áõ∏ÈóúÊåâÈàï
                    const clockButtons = await this.page.$$eval('button', buttons => 
                        buttons.map(btn => btn.textContent.trim()).filter(text => 
                            text.includes('ÊâìÂç°') || text.includes('‰∏äÁè≠') || text.includes('‰∏ãÁè≠')
                        )
                    );
                    
                    if (clockButtons.length > 0) {
                        // ÈªûÊìäÁ¨¨‰∏ÄÂÄãÊâìÂç°ÊåâÈàï
                        await this.page.evaluate(() => {
                            const buttons = Array.from(document.querySelectorAll('button'));
                            const clockBtn = buttons.find(btn => 
                                btn.textContent.includes('ÊâìÂç°') || 
                                btn.textContent.includes('‰∏äÁè≠') || 
                                btn.textContent.includes('‰∏ãÁè≠')
                            );
                            if (clockBtn) clockBtn.click();
                        });
                        
                        await new Promise(resolve => setTimeout(resolve, 3000));
                        
                        // Ê™¢Êü•ÊòØÂê¶ÊúâÊàêÂäüÂõûÊáâ
                        const hasResponse = await this.page.evaluate(() => {
                            const alerts = document.querySelectorAll('.alert, .toast, .notification');
                            return alerts.length > 0 || document.body.textContent.includes('ÊàêÂäü');
                        });
                        
                        return {
                            success: hasResponse,
                            details: `ÊâæÂà∞ÊâìÂç°ÊåâÈàï: ${clockButtons.length}ÂÄã, Á≥ªÁµ±ÂõûÊáâ: ${hasResponse ? 'Êúâ' : 'ÁÑ°'}`
                        };
                    } else {
                        return {
                            success: false,
                            details: 'Êú™ÊâæÂà∞ÊâìÂç°ÊåâÈàï'
                        };
                    }
                }
            },
            {
                name: 'Á∂≠‰øÆÁî≥Ë´ãÊñ∞Â¢û',
                module: 'maintenance',
                operation: async () => {
                    await this.page.click('[data-section="maintenance"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Â∞ãÊâæÁ∂≠‰øÆÁî≥Ë´ãË°®ÂñÆ
                    const hasForm = await this.page.$('form') !== null;
                    if (!hasForm) {
                        return { success: false, details: 'Êú™ÊâæÂà∞Á∂≠‰øÆÁî≥Ë´ãË°®ÂñÆ' };
                    }
                    
                    // Â°´ÂØ´Á∂≠‰øÆÁî≥Ë´ã
                    const inputs = await this.page.$$('input[type="text"], textarea');
                    if (inputs.length > 0) {
                        await inputs[0].type('Ê∏¨Ë©¶Á∂≠‰øÆÁî≥Ë´ã - ÂÜ∑Ê∞£ÊïÖÈöú');
                        
                        const submitBtn = await this.page.$('button[type="submit"], .btn-primary');
                        if (submitBtn) {
                            await submitBtn.click();
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            
                            const success = await this.page.evaluate(() => {
                                return document.body.textContent.includes('ÊàêÂäü') || 
                                       document.body.textContent.includes('Â∑≤Êèê‰∫§');
                            });
                            
                            return {
                                success: success,
                                details: `Ë°®ÂñÆÊèê‰∫§: ${success ? 'ÊàêÂäü' : 'ÁÑ°ÂõûÊáâ'}`
                            };
                        }
                    }
                    
                    return { success: false, details: 'ÁÑ°Ê≥ïÂÆåÊàêÁ∂≠‰øÆÁî≥Ë´ãÊèê‰∫§' };
                }
            }
        ];

        for (const test of createTests) {
            try {
                console.log(`\nüîπ Ê∏¨Ë©¶: ${test.name}`);
                const result = await test.operation();
                
                this.testResults.push({
                    category: 'Âì°Â∑•Êñ∞Â¢ûÂäüËÉΩ',
                    test: test.name,
                    success: result.success,
                    details: result.details
                });
                
                console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.details}`);
                
            } catch (error) {
                console.error(`‚ùå ${test.name} Âü∑Ë°åÈåØË™§:`, error.message);
                this.testResults.push({
                    category: 'Âì°Â∑•Êñ∞Â¢ûÂäüËÉΩ',
                    test: test.name,
                    success: false,
                    details: `Âü∑Ë°åÈåØË™§: ${error.message}`
                });
            }
        }
    }

    async testEmployeeEditOperations() {
        console.log('\n‚úèÔ∏è Ê∏¨Ë©¶Âì°Â∑•È†ÅÈù¢ - Á∑®ËºØÂäüËÉΩ');
        
        const editTests = [
            {
                name: 'ÂÄã‰∫∫Ë≥áÊñôÁ∑®ËºØ',
                operation: async () => {
                    await this.page.click('[data-section="profile"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Êü•ÊâæÂèØÁ∑®ËºØÁöÑÊ¨Ñ‰Ωç
                    const phoneField = await this.page.$('#profile-phone, input[name="phone"], input[type="tel"]');
                    if (phoneField) {
                        const originalValue = await this.page.evaluate(el => el.value, phoneField);
                        
                        await phoneField.click({ clickCount: 3 }); // ÂÖ®ÈÅ∏
                        await phoneField.type('0912345678');
                        
                        const saveBtn = await this.page.$('button[type="submit"], .btn-success, .save-btn');
                        if (saveBtn) {
                            await saveBtn.click();
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            
                            const newValue = await this.page.evaluate(el => el.value, phoneField);
                            return {
                                success: newValue === '0912345678' && newValue !== originalValue,
                                details: `ÂéüÂÄº: ${originalValue}, Êñ∞ÂÄº: ${newValue}`
                            };
                        }
                    }
                    
                    return { success: false, details: 'Êú™ÊâæÂà∞ÂèØÁ∑®ËºØÁöÑÂÄã‰∫∫Ë≥áÊñôÊ¨Ñ‰Ωç' };
                }
            },
            {
                name: 'ÂçáÈÅ∑ÊäïÁ•®Êìç‰Ωú',
                operation: async () => {
                    await this.page.click('[data-section="promotion"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Êü•ÊâæÊäïÁ•®ÊåâÈàïÊàñÈÅ∏È†Ö
                    const voteButtons = await this.page.$$('button, input[type="radio"], .vote-option');
                    if (voteButtons.length > 0) {
                        await voteButtons[0].click();
                        await new Promise(resolve => setTimeout(resolve, 2000));
                        
                        const hasResponse = await this.page.evaluate(() => {
                            return document.body.textContent.includes('ÊäïÁ•®') || 
                                   document.body.textContent.includes('ÊàêÂäü') ||
                                   document.body.textContent.includes('Â∑≤ÊäïÁ•®');
                        });
                        
                        return {
                            success: hasResponse,
                            details: `ÊâæÂà∞ÊäïÁ•®ÈÅ∏È†Ö: ${voteButtons.length}ÂÄã, Á≥ªÁµ±ÂõûÊáâ: ${hasResponse ? 'Êúâ' : 'ÁÑ°'}`
                        };
                    }
                    
                    return { success: false, details: 'Êú™ÊâæÂà∞ÊäïÁ•®ÈÅ∏È†Ö' };
                }
            }
        ];

        for (const test of editTests) {
            try {
                console.log(`\nüîπ Ê∏¨Ë©¶: ${test.name}`);
                const result = await test.operation();
                
                this.testResults.push({
                    category: 'Âì°Â∑•Á∑®ËºØÂäüËÉΩ',
                    test: test.name,
                    success: result.success,
                    details: result.details
                });
                
                console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.details}`);
                
            } catch (error) {
                console.error(`‚ùå ${test.name} Âü∑Ë°åÈåØË™§:`, error.message);
            }
        }
    }

    async testEmployeeQueryOperations() {
        console.log('\nüîç Ê∏¨Ë©¶Âì°Â∑•È†ÅÈù¢ - Êü•Ë©¢ÂäüËÉΩ');
        
        const queryTests = [
            {
                name: 'ÊéíÁè≠Êü•Ë©¢ÂäüËÉΩ',
                operation: async () => {
                    await this.page.click('[data-section="schedule"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    // Ê™¢Êü•ÊòØÂê¶ÊúâÊéíÁè≠Ë≥áÊñôÈ°ØÁ§∫
                    const hasScheduleData = await this.page.evaluate(() => {
                        const scheduleContainer = document.getElementById('schedule');
                        if (!scheduleContainer) return false;
                        
                        return scheduleContainer.textContent.includes('ÊéíÁè≠') ||
                               scheduleContainer.querySelector('table') !== null ||
                               scheduleContainer.querySelector('.schedule-item') !== null;
                    });
                    
                    return {
                        success: hasScheduleData,
                        details: `ÊéíÁè≠Ë≥áÊñôÈ°ØÁ§∫: ${hasScheduleData ? 'Êúâ' : 'ÁÑ°'}`
                    };
                }
            },
            {
                name: 'Â∫´Â≠òÊü•Ë©¢ÂäüËÉΩ',
                operation: async () => {
                    await this.page.click('[data-section="inventory"]');
                    await new Promise(resolve => setTimeout(resolve, 1500));
                    
                    const hasInventoryData = await this.page.evaluate(() => {
                        const inventoryContainer = document.getElementById('inventory');
                        if (!inventoryContainer) return false;
                        
                        return inventoryContainer.textContent.includes('Â∫´Â≠ò') ||
                               inventoryContainer.querySelector('table') !== null ||
                               inventoryContainer.querySelector('.inventory-item') !== null;
                    });
                    
                    return {
                        success: hasInventoryData,
                        details: `Â∫´Â≠òË≥áÊñôÈ°ØÁ§∫: ${hasInventoryData ? 'Êúâ' : 'ÁÑ°'}`
                    };
                }
            }
        ];

        for (const test of queryTests) {
            try {
                console.log(`\nüîπ Ê∏¨Ë©¶: ${test.name}`);
                const result = await test.operation();
                
                this.testResults.push({
                    category: 'Âì°Â∑•Êü•Ë©¢ÂäüËÉΩ',
                    test: test.name,
                    success: result.success,
                    details: result.details
                });
                
                console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.details}`);
                
            } catch (error) {
                console.error(`‚ùå ${test.name} Âü∑Ë°åÈåØË™§:`, error.message);
            }
        }
    }

    async testAdminOperations() {
        console.log('\nüëë Ê∏¨Ë©¶ÁÆ°ÁêÜÂì°ÂäüËÉΩ');
        
        try {
            // ÁôªÂá∫Âì°Â∑•Ë∫´‰ªΩ
            await this.page.goto(`${this.baseUrl}/`, { waitUntil: 'domcontentloaded' });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // ÂòóË©¶ÈÄ≤ÂÖ•ÁÆ°ÁêÜÂì°È†ÅÈù¢
            await this.page.goto(`${this.baseUrl}/admin`, { waitUntil: 'domcontentloaded' });
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            const isAdminPage = await this.page.evaluate(() => {
                return document.body.textContent.includes('ÁÆ°ÁêÜ') ||
                       document.body.textContent.includes('Admin') ||
                       document.querySelector('.admin-panel') !== null;
            });
            
            if (isAdminPage) {
                console.log('‚úÖ ÊàêÂäüÈÄ≤ÂÖ•ÁÆ°ÁêÜÂì°È†ÅÈù¢');
                
                // Ê∏¨Ë©¶ÁÆ°ÁêÜÂì°ÂäüËÉΩ
                const adminTests = await this.testAdminCRUD();
                return adminTests;
            } else {
                console.log('‚ö†Ô∏è ÁÆ°ÁêÜÂì°È†ÅÈù¢ÂèØËÉΩÈúÄË¶ÅÁâπÊÆäÁôªÂÖ•');
                
                this.testResults.push({
                    category: 'ÁÆ°ÁêÜÂì°ÂäüËÉΩ',
                    test: 'ÁÆ°ÁêÜÂì°È†ÅÈù¢Ë®™Âïè',
                    success: false,
                    details: 'ÁÑ°Ê≥ïÁõ¥Êé•Ë®™ÂïèÁÆ°ÁêÜÂì°È†ÅÈù¢ÔºåÂèØËÉΩÈúÄË¶ÅÁâπÊÆäË™çË≠â'
                });
                
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå ÁÆ°ÁêÜÂì°ÂäüËÉΩÊ∏¨Ë©¶ÈåØË™§:', error.message);
            return false;
        }
    }

    async testAdminCRUD() {
        console.log('\nüîß Ê∏¨Ë©¶ÁÆ°ÁêÜÂì°CRUDÂäüËÉΩ');
        
        const adminTests = [
            {
                name: 'Âì°Â∑•Ë≥áÊñôÁÆ°ÁêÜ',
                operation: async () => {
                    // Â∞ãÊâæÂì°Â∑•ÁÆ°ÁêÜÁõ∏ÈóúÊåâÈàïÊàñÈÄ£Áµê
                    const employeeLinks = await this.page.$$eval('a, button', elements =>
                        elements.filter(el => 
                            el.textContent.includes('Âì°Â∑•') || 
                            el.textContent.includes('Employee')
                        ).length
                    );
                    
                    return {
                        success: employeeLinks > 0,
                        details: `ÊâæÂà∞Âì°Â∑•ÁÆ°ÁêÜÈÅ∏È†Ö: ${employeeLinks}ÂÄã`
                    };
                }
            },
            {
                name: 'Á≥ªÁµ±Ë®≠ÂÆöÂäüËÉΩ',
                operation: async () => {
                    const settingsLinks = await this.page.$$eval('a, button', elements =>
                        elements.filter(el => 
                            el.textContent.includes('Ë®≠ÂÆö') || 
                            el.textContent.includes('Settings') ||
                            el.textContent.includes('ÈÖçÁΩÆ')
                        ).length
                    );
                    
                    return {
                        success: settingsLinks > 0,
                        details: `ÊâæÂà∞Á≥ªÁµ±Ë®≠ÂÆöÈÅ∏È†Ö: ${settingsLinks}ÂÄã`
                    };
                }
            }
        ];

        for (const test of adminTests) {
            try {
                const result = await test.operation();
                this.testResults.push({
                    category: 'ÁÆ°ÁêÜÂì°CRUD',
                    test: test.name,
                    success: result.success,
                    details: result.details
                });
                
                console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.details}`);
            } catch (error) {
                console.error(`‚ùå ${test.name} ÈåØË™§:`, error.message);
            }
        }
        
        return true;
    }

    generateComprehensiveReport() {
        const categories = [...new Set(this.testResults.map(r => r.category))];
        const totalTests = this.testResults.length;
        const successfulTests = this.testResults.filter(r => r.success).length;
        const successRate = Math.round((successfulTests / totalTests) * 100);
        
        let status = '‚ùå Á≥ªÁµ±ÂäüËÉΩÂ≠òÂú®ÈáçÂ§ßÂïèÈ°å';
        if (successRate >= 85) status = 'üéâ Á≥ªÁµ±ÂäüËÉΩÂÆåÊï¥ÔºåÈÅîÂà∞‰ºÅÊ•≠Á¥öÊ®ôÊ∫ñ';
        else if (successRate >= 70) status = '‚úÖ Á≥ªÁµ±ÂäüËÉΩËâØÂ•ΩÔºåÂü∫Êú¨ÈÅîÊ®ô';
        else if (successRate >= 50) status = '‚ö†Ô∏è Á≥ªÁµ±ÂäüËÉΩÂü∫Êú¨ÂèØÁî®ÔºåÈúÄÊîπÈÄ≤';
        
        const report = `
# üè¢ ‰ºÅÊ•≠Âì°Â∑•ÁÆ°ÁêÜÁ≥ªÁµ± - ÂÖ®Èù¢CRUDÂäüËÉΩÊ∏¨Ë©¶Â†±Âëä

## üìä Á∏ΩÈ´îË©ïÂàÜ: ${successRate}/100

${status}

## üìã Ê∏¨Ë©¶Áµ±Ë®à

- **Á∏ΩÊ∏¨Ë©¶È†ÖÁõÆ**: ${totalTests}
- **ÊàêÂäüÈ†ÖÁõÆ**: ${successfulTests}
- **ÊàêÂäüÁéá**: ${successRate}%
- **Ê∏¨Ë©¶ÂàÜÈ°û**: ${categories.length}ÂÄã

## üìà ÂàÜÈ°ûÁµêÊûú

${categories.map(category => {
    const categoryTests = this.testResults.filter(r => r.category === category);
    const categorySuccess = categoryTests.filter(r => r.success).length;
    const categoryRate = Math.round((categorySuccess / categoryTests.length) * 100);
    
    return `
### ${categorySuccess === categoryTests.length ? '‚úÖ' : categorySuccess > 0 ? '‚ö†Ô∏è' : '‚ùå'} ${category}
- **ÊàêÂäüÁéá**: ${categoryRate}% (${categorySuccess}/${categoryTests.length})
- **Ë©≥Á¥∞ÁµêÊûú**:
${categoryTests.map(test => `  - ${test.success ? '‚úÖ' : '‚ùå'} **${test.test}**: ${test.details}`).join('\n')}
`;
}).join('')}

## üîç APIÂõûÊáâÂàÜÊûê

${this.testResults.filter(r => r.details.includes('API') || r.details.includes('ÂõûÊáâ')).map(r => 
    `- **${r.test}**: ${r.details}`
).join('\n') || 'Êú™Ê™¢Ê∏¨Âà∞ÊòéÁ¢∫ÁöÑAPIÂõûÊáâË≥áË®ä'}

## üí° ÈóúÈçµÁôºÁèæ

### üéØ ÂäüËÉΩÂº∑È†Ö:
${this.testResults.filter(r => r.success).map(r => `- ‚úÖ ${r.test}`).slice(0, 5).join('\n') || 'Êö´ÁÑ°ÊòéÁ¢∫Âº∑È†Ö'}

### ‚ö†Ô∏è ÈúÄÊîπÈÄ≤È†ÖÁõÆ:
${this.testResults.filter(r => !r.success).map(r => `- ‚ùå ${r.test}: ${r.details}`).slice(0, 5).join('\n') || '‚úÖ ÊâÄÊúâÂäüËÉΩÊ≠£Â∏∏ÈÅã‰Ωú'}

## üöÄ Âª∫Ë≠∞

${successRate >= 85 ? 
  '‚úÖ Á≥ªÁµ±ÂäüËÉΩÂÆåÂñÑÔºåÂª∫Ë≠∞ÈÄ≤ÂÖ•ÁîüÁî¢Áí∞Â¢ÉÈÉ®ÁΩ≤' : 
  successRate >= 70 ?
  '‚ö†Ô∏è Á≥ªÁµ±Âü∫Êú¨ÂäüËÉΩÂÆåÂñÑÔºåÂª∫Ë≠∞‰øÆÂæ©Â§±ÊïóÈ†ÖÁõÆÂæåÈÉ®ÁΩ≤' :
  '‚ùå Á≥ªÁµ±Â≠òÂú®ÈáçË¶ÅÂäüËÉΩÂïèÈ°åÔºåÂª∫Ë≠∞ÂÖ®Èù¢Ê™¢‰øÆÂæåÂÜçÊ∏¨Ë©¶'}

---
**Ê∏¨Ë©¶ÊôÇÈñì**: ${new Date().toLocaleString('zh-TW')}
**Ê∏¨Ë©¶Â∑•ÂÖ∑**: ÂÖ®Èù¢CRUDÂäüËÉΩÊ∏¨Ë©¶ÂºïÊìé
**Ê∏¨Ë©¶ÁØÑÂúç**: Âì°Â∑•È†ÅÈù¢ + ÁÆ°ÁêÜÂì°È†ÅÈù¢ + CRUDÊìç‰Ωú + APIÂõûÊáâÂàÜÊûê
`;
        
        return { report, successRate, totalTests, successfulTests };
    }

    async close() {
        console.log('\nüîö ÈóúÈñâÊ∏¨Ë©¶Áí∞Â¢É...');
        if (this.browser) {
            await this.browser.close();
        }
    }

    async runFullCRUDTest() {
        try {
            await this.init();
            
            // Âü∑Ë°åÂì°Â∑•ÂäüËÉΩÊ∏¨Ë©¶
            const loginSuccess = await this.loginAsEmployee();
            if (loginSuccess) {
                await this.testEmployeeCreateOperations();
                await this.testEmployeeEditOperations();
                await this.testEmployeeQueryOperations();
            }
            
            // Âü∑Ë°åÁÆ°ÁêÜÂì°ÂäüËÉΩÊ∏¨Ë©¶
            await this.testAdminOperations();
            
            const reportData = this.generateComprehensiveReport();
            console.log(reportData.report);
            
            return reportData;
            
        } catch (error) {
            console.error('‚ùå ÂÖ®Èù¢Ê∏¨Ë©¶Âü∑Ë°åÂ§±Êïó:', error);
            throw error;
        } finally {
            await this.close();
        }
    }
}

// Âü∑Ë°åÊ∏¨Ë©¶
async function main() {
    const tester = new ComprehensiveSystemCRUDTest();
    
    try {
        const results = await tester.runFullCRUDTest();
        
        // ÁôºÈÄÅË©≥Á¥∞Â†±ÂëäÂà∞Telegram
        const https = require('https');
        const telegramData = {
            chat_id: '-1002658082392',
            text: `üè¢ ÂÖ®Èù¢CRUDÂäüËÉΩÊ∏¨Ë©¶ÂÆåÊàê\\n\\nüìä Á∏ΩË©ïÂàÜ: ${results.successRate}/100\\n‚úÖ ÊàêÂäü: ${results.successfulTests}/${results.totalTests}\\n\\nüîç Ê∏¨Ë©¶ÁØÑÂúç:\\n- Âì°Â∑•Êñ∞Â¢ûÂäüËÉΩ\\n- Âì°Â∑•Á∑®ËºØÂäüËÉΩ\\n- Âì°Â∑•Êü•Ë©¢ÂäüËÉΩ\\n- ÁÆ°ÁêÜÂì°CRUDÂäüËÉΩ\\n- APIÂõûÊáâÂàÜÊûê\\n\\n${results.successRate >= 85 ? 'üéâ ÈÅîÂà∞‰ºÅÊ•≠Á¥öÊ®ôÊ∫ñÔºÅ' : results.successRate >= 70 ? '‚úÖ ÂäüËÉΩËâØÂ•Ω' : '‚ö†Ô∏è ÈúÄË¶ÅÊîπÈÄ≤'}\\n\\nüïê ${new Date().toLocaleString('zh-TW')}`
        };
        
        const postData = JSON.stringify(telegramData);
        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: '/bot7659930552:AAF_jF1rAXFnjFO176-9X5fKfBwbrko8BNc/sendMessage',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };
        
        const req = https.request(options);
        req.write(postData);
        req.end();
        
        console.log('\nüì± TelegramÂÖ®Èù¢Ê∏¨Ë©¶Â†±ÂëäÂ∑≤ÁôºÈÄÅ');
        
        // ‰øùÂ≠òË©≥Á¥∞Â†±ÂëäÂà∞Êñá‰ª∂
        const fs = require('fs');
        fs.writeFileSync('D:\\0809\\comprehensive-crud-test-report.md', results.report);
        console.log('üìÑ Ë©≥Á¥∞Â†±ÂëäÂ∑≤‰øùÂ≠òËá≥: comprehensive-crud-test-report.md');
        
    } catch (error) {
        console.error('Ê∏¨Ë©¶Âü∑Ë°åÂ§±Êïó:', error);
    }
}

main().catch(console.error);