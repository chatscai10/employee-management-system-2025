/**
 * ==========================================
 * Âì°Â∑•Ë™çË≠âÁ≥ªÁµ±Ë∑ØÁî± - Employee Auth Routes  
 * ==========================================
 * Âü∫ÊñºÁ≥ªÁµ±ÈÇèËºØ.txtË¶èÊ†º - ÂßìÂêç+Ë∫´ÂàÜË≠âÈ©óË≠â
 */

const express = require('express');
const router = express.Router();
const session = require('express-session');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { Op } = require('sequelize');
const logger = require('../utils/logger');
const { initModels, getModels } = require('../models/index');
const telegramService = require('../services/telegram');

// Session ‰∏≠Èñì‰ª∂
router.use(session({
    secret: process.env.SESSION_SECRET || 'employee-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: false, // ÈñãÁôºÁí∞Â¢ÉË®≠ÁÇ∫false
        maxAge: 24 * 60 * 60 * 1000 // 24Â∞èÊôÇ
    }
}));

// È©óË≠âÂì°Â∑•Ë™çË≠âÁãÄÊÖã‰∏≠Èñì‰ª∂
const verifyEmployeeAuth = (req, res, next) => {
    const { employeeId } = req.session;
    if (!employeeId) {
        return res.status(401).json({ 
            success: false, 
            message: 'Ë´ãÂÖàÁôªÂÖ•Á≥ªÁµ±',
            code: 'UNAUTHORIZED'
        });
    }
    next();
};

// 1. Âì°Â∑•ÁôªÂÖ• (ÂßìÂêç+Ë∫´ÂàÜË≠âÈ©óË≠â)
router.post('/login', async (req, res) => {
    try {
        const { name, idNumber } = req.body;
        
        // È©óË≠âÂøÖÂ°´Ê¨Ñ‰Ωç
        if (!name || !idNumber) {
            return res.status(400).json({
                success: false,
                message: 'Ë´ãËº∏ÂÖ•ÂßìÂêçÂíåË∫´ÂàÜË≠âÂ≠óËôü',
                code: 'MISSING_FIELDS'
            });
        }

        await initModels();
        const models = getModels();
        
        // Êü•ÊâæÂì°Â∑• (Âü∫ÊñºÁ≥ªÁµ±ÈÇèËºØ.txtË¶èÊ†º)
        const employee = await models.Employee.findOne({
            where: {
                name: name.trim(),
                idNumber: idNumber.trim(),
                status: 'Âú®ËÅ∑'
            }
        });

        if (!employee) {
            logger.warn('Âì°Â∑•ÁôªÂÖ•Â§±Êïó - Êâæ‰∏çÂà∞Âì°Â∑•', { name, idNumber: idNumber.substring(0, 3) + '****' });
            return res.status(401).json({
                success: false,
                message: 'ÂßìÂêçÊàñË∫´ÂàÜË≠âÂ≠óËôüÈåØË™§ÔºåÊàñÂ∏≥ËôüÊú™ÂØ©Ê†∏ÈÄöÈÅé',
                code: 'INVALID_CREDENTIALS'
            });
        }

        // Ë®≠ÂÆösession
        req.session.employeeId = employee.id;
        req.session.employeeName = employee.name;
        req.session.employeeStore = employee.currentStore;
        req.session.employeePosition = employee.position;

        // ÁîüÊàêJWT Token (ÂèØÈÅ∏)
        const token = jwt.sign(
            { 
                employeeId: employee.id,
                name: employee.name,
                store: employee.currentStore,
                position: employee.position
            },
            process.env.JWT_SECRET || 'employee-jwt-secret',
            { expiresIn: '24h' }
        );

        logger.info('Âì°Â∑•ÁôªÂÖ•ÊàêÂäü', { 
            employeeId: employee.id,
            name: employee.name,
            store: employee.currentStore,
            ip: req.ip 
        });

        res.json({
            success: true,
            message: 'ÁôªÂÖ•ÊàêÂäüÔºÅ',
            data: {
                employee: {
                    id: employee.id,
                    name: employee.name,
                    currentStore: employee.currentStore,
                    position: employee.position,
                    hireDate: employee.hireDate
                },
                token: token
            }
        });

        // ÁôºÈÄÅTelegramÁôªÂÖ•ÈÄöÁü•
        try {
            await telegramService.sendEmployeeNotification(
                'üë§ Âì°Â∑•ÁôªÂÖ•ÈÄöÁü•',
                `${employee.name} Â∑≤ÁôªÂÖ•Á≥ªÁµ±\nÂàÜÂ∫ó: ${employee.currentStore}\nÊôÇÈñì: ${new Date().toLocaleString('zh-TW')}`
            );
        } catch (notifyError) {
            logger.error('ÁôºÈÄÅÁôªÂÖ•ÈÄöÁü•Â§±Êïó:', notifyError);
        }

    } catch (error) {
        logger.error('Âì°Â∑•ÁôªÂÖ•Á≥ªÁµ±ÈåØË™§:', error);
        res.status(500).json({
            success: false,
            message: 'Á≥ªÁµ±ÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶',
            code: 'SERVER_ERROR'
        });
    }
});

// 2. Âì°Â∑•Ë®ªÂÜä (Âü∫ÊñºÁ≥ªÁµ±ÈÇèËºØ.txtÁöÑ11ÂÄãÂøÖÂ°´Ê¨Ñ‰Ωç)
router.post('/register', async (req, res) => {
    try {
        const {
            name,
            idNumber,
            birthDate,
            gender,
            hasDriverLicense,
            phone,
            address,
            emergencyContactName,
            emergencyContactRelation,
            emergencyContactPhone,
            hireDate
        } = req.body;

        // È©óË≠âÂøÖÂ°´Ê¨Ñ‰Ωç (Á≥ªÁµ±ÈÇèËºØ.txtË¶èÊ†º)
        const requiredFields = [
            'name', 'idNumber', 'birthDate', 'gender', 'hasDriverLicense',
            'phone', 'address', 'emergencyContactName', 'emergencyContactRelation',
            'emergencyContactPhone', 'hireDate'
        ];

        const missingFields = requiredFields.filter(field => !req.body[field] && req.body[field] !== false);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                success: false,
                message: `Ë´ãÂ°´ÂØ´ÊâÄÊúâÂøÖÂ°´Ê¨Ñ‰Ωç: ${missingFields.join(', ')}`,
                code: 'MISSING_REQUIRED_FIELDS',
                missingFields
            });
        }

        await initModels();
        const models = getModels();

        // Ê™¢Êü•ÊòØÂê¶Â∑≤Â≠òÂú®
        const existingEmployee = await models.Employee.findOne({
            where: {
                [Op.or]: [
                    { name: name.trim() },
                    { idNumber: idNumber.trim() }
                ]
            }
        });

        if (existingEmployee) {
            return res.status(409).json({
                success: false,
                message: 'Âì°Â∑•ÂßìÂêçÊàñË∫´ÂàÜË≠âÂ≠óËôüÂ∑≤Â≠òÂú®',
                code: 'EMPLOYEE_EXISTS'
            });
        }

        // Âª∫Á´ãÊñ∞Âì°Â∑• (È†êË®≠ÁãÄÊÖãÁÇ∫ÂØ©Ê†∏‰∏≠)
        const newEmployee = await models.Employee.create({
            name: name.trim(),
            idNumber: idNumber.trim(),
            birthDate,
            gender,
            hasDriverLicense: hasDriverLicense === true || hasDriverLicense === 'true',
            phone: phone.trim(),
            address: address.trim(),
            emergencyContactName: emergencyContactName.trim(),
            emergencyContactRelation: emergencyContactRelation.trim(),
            emergencyContactPhone: emergencyContactPhone.trim(),
            hireDate,
            currentStore: 'ÂÖßÂ£¢Âø†Â≠ùÂ∫ó', // È†êË®≠ÂàÜÂ∫ó
            position: 'ÂØ¶ÁøíÁîü', // È†êË®≠ËÅ∑‰Ωç
            positionStartDate: hireDate,
            status: 'ÂØ©Ê†∏‰∏≠'
        });

        logger.info('Êñ∞Âì°Â∑•Ë®ªÂÜäÊàêÂäü', { 
            employeeId: newEmployee.id,
            name: newEmployee.name,
            store: newEmployee.currentStore
        });

        res.status(201).json({
            success: true,
            message: 'Ë®ªÂÜäÊàêÂäüÔºÅË´ãÁ≠âÂæÖÂØ©Ê†∏ÈÄöÈÅéÂæåÂç≥ÂèØÁôªÂÖ•',
            data: {
                employeeId: newEmployee.id,
                name: newEmployee.name,
                status: newEmployee.status
            }
        });

        // ÁôºÈÄÅÊñ∞Âì°Â∑•Ë®ªÂÜäTelegramÈÄöÁü• (Âü∫ÊñºÈÄöÁü•Ê®°Êùø.txt)
        try {
            await telegramService.sendEmployeeRegistrationNotification(newEmployee);
        } catch (notifyError) {
            logger.error('ÁôºÈÄÅË®ªÂÜäÈÄöÁü•Â§±Êïó:', notifyError);
        }

    } catch (error) {
        logger.error('Âì°Â∑•Ë®ªÂÜäÁ≥ªÁµ±ÈåØË™§:', error);
        res.status(500).json({
            success: false,
            message: 'Á≥ªÁµ±ÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶',
            code: 'SERVER_ERROR'
        });
    }
});

// 3. Âì°Â∑•ÁôªÂá∫
router.post('/logout', verifyEmployeeAuth, (req, res) => {
    const employeeName = req.session.employeeName;
    
    req.session.destroy((err) => {
        if (err) {
            logger.error('Âì°Â∑•ÁôªÂá∫ÈåØË™§:', err);
            return res.status(500).json({
                success: false,
                message: 'ÁôªÂá∫Â§±Êïó'
            });
        }

        logger.info('Âì°Â∑•ÁôªÂá∫ÊàêÂäü', { employeeName });
        
        res.json({
            success: true,
            message: 'Â∑≤ÁôªÂá∫'
        });
    });
});

// 4. Ê™¢Êü•ÁôªÂÖ•ÁãÄÊÖã
router.get('/verify', (req, res) => {
    const { employeeId, employeeName, employeeStore, employeePosition } = req.session;
    
    if (employeeId) {
        res.json({
            success: true,
            data: {
                isAuthenticated: true,
                employee: {
                    id: employeeId,
                    name: employeeName,
                    currentStore: employeeStore,
                    position: employeePosition
                }
            }
        });
    } else {
        res.json({
            success: true,
            data: {
                isAuthenticated: false
            }
        });
    }
});

// 5. Áç≤ÂèñÂì°Â∑•ÂÄã‰∫∫Ë≥áÊñô
router.get('/profile', verifyEmployeeAuth, async (req, res) => {
    try {
        await initModels();
        const models = getModels();
        
        const employee = await models.Employee.findByPk(req.session.employeeId, {
            attributes: [
                'id', 'name', 'idNumber', 'birthDate', 'gender',
                'hasDriverLicense', 'phone', 'address', 'emergencyContactName',
                'emergencyContactRelation', 'emergencyContactPhone', 'hireDate',
                'currentStore', 'position', 'positionStartDate', 'status',
                'createdAt', 'updatedAt'
            ]
        });

        if (!employee) {
            return res.status(404).json({
                success: false,
                message: 'Âì°Â∑•Ë≥áÊñô‰∏çÂ≠òÂú®'
            });
        }

        res.json({
            success: true,
            data: employee
        });

    } catch (error) {
        logger.error('Áç≤ÂèñÂì°Â∑•Ë≥áÊñôÈåØË™§:', error);
        res.status(500).json({
            success: false,
            message: 'Á≥ªÁµ±ÈåØË™§'
        });
    }
});

// 6. Êõ¥Êñ∞Âì°Â∑•ÂÄã‰∫∫Ë≥áÊñô
router.put('/profile', verifyEmployeeAuth, async (req, res) => {
    try {
        await initModels();
        const models = getModels();
        
        const employee = await models.Employee.findByPk(req.session.employeeId);
        
        if (!employee) {
            return res.status(404).json({
                success: false,
                message: 'Âì°Â∑•Ë≥áÊñô‰∏çÂ≠òÂú®'
            });
        }

        // Âè™ÂÖÅË®±Êõ¥Êñ∞ÁâπÂÆöÊ¨Ñ‰Ωç (ÂÆâÂÖ®ËÄÉÈáè)
        const allowedFields = [
            'phone', 'address', 'emergencyContactName',
            'emergencyContactRelation', 'emergencyContactPhone'
        ];

        const updateData = {};
        allowedFields.forEach(field => {
            if (req.body[field] !== undefined) {
                updateData[field] = req.body[field];
            }
        });

        if (Object.keys(updateData).length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Ê≤íÊúâÂèØÊõ¥Êñ∞ÁöÑÊ¨Ñ‰Ωç'
            });
        }

        await employee.update(updateData);

        logger.info('Âì°Â∑•Êõ¥Êñ∞ÂÄã‰∫∫Ë≥áÊñô', { 
            employeeId: employee.id,
            name: employee.name,
            updatedFields: Object.keys(updateData)
        });

        res.json({
            success: true,
            message: 'ÂÄã‰∫∫Ë≥áÊñôÊõ¥Êñ∞ÊàêÂäü',
            data: employee
        });

    } catch (error) {
        logger.error('Êõ¥Êñ∞Âì°Â∑•Ë≥áÊñôÈåØË™§:', error);
        res.status(500).json({
            success: false,
            message: 'Á≥ªÁµ±ÈåØË™§'
        });
    }
});

// 7. ÂØÜÁ¢ºÈáçË®≠ (‰ΩøÁî®Ë∫´ÂàÜË≠âÂæå4Á¢ºÈ©óË≠â)
router.post('/reset-password', async (req, res) => {
    try {
        const { name, idNumberLast4, newIdNumber } = req.body;

        if (!name || !idNumberLast4 || !newIdNumber) {
            return res.status(400).json({
                success: false,
                message: 'Ë´ãÂ°´ÂØ´ÊâÄÊúâÂøÖÂ°´Ê¨Ñ‰Ωç'
            });
        }

        await initModels();
        const models = getModels();

        const employee = await models.Employee.findOne({
            where: {
                name: name.trim(),
                status: 'Âú®ËÅ∑'
            }
        });

        if (!employee) {
            return res.status(404).json({
                success: false,
                message: 'Êâæ‰∏çÂà∞Ë©≤Âì°Â∑•'
            });
        }

        // È©óË≠âË∫´ÂàÜË≠âÂæå4Á¢º
        const actualLast4 = employee.idNumber.slice(-4);
        if (idNumberLast4 !== actualLast4) {
            return res.status(401).json({
                success: false,
                message: 'Ë∫´ÂàÜË≠âÂæå4Á¢ºÈ©óË≠âÂ§±Êïó'
            });
        }

        // Êõ¥Êñ∞Ë∫´ÂàÜË≠âÂ≠óËôü (‰ΩúÁÇ∫Êñ∞ÂØÜÁ¢º)
        await employee.update({
            idNumber: newIdNumber.trim()
        });

        logger.info('Âì°Â∑•ÈáçË®≠ÂØÜÁ¢ºÊàêÂäü', { 
            employeeId: employee.id,
            name: employee.name
        });

        res.json({
            success: true,
            message: 'ÂØÜÁ¢ºÈáçË®≠ÊàêÂäüÔºÅË´ã‰ΩøÁî®Êñ∞ÁöÑË∫´ÂàÜË≠âÂ≠óËôüÁôªÂÖ•'
        });

        // ÁôºÈÄÅÂØÜÁ¢ºÈáçË®≠ÈÄöÁü•
        try {
            await telegramService.sendEmployeeNotification(
                'üîë ÂØÜÁ¢ºÈáçË®≠ÈÄöÁü•',
                `${employee.name} Â∑≤ÈáçË®≠ÁôªÂÖ•ÂØÜÁ¢º\nÊôÇÈñì: ${new Date().toLocaleString('zh-TW')}`
            );
        } catch (notifyError) {
            logger.error('ÁôºÈÄÅÂØÜÁ¢ºÈáçË®≠ÈÄöÁü•Â§±Êïó:', notifyError);
        }

    } catch (error) {
        logger.error('ÂØÜÁ¢ºÈáçË®≠ÈåØË™§:', error);
        res.status(500).json({
            success: false,
            message: 'Á≥ªÁµ±ÈåØË™§'
        });
    }
});

module.exports = router;